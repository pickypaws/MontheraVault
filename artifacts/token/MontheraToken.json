{"language":"Solidity","sources":{"contracts/montheratoken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title MontheraToken - ERC20 (OpenZeppelin v5.2.0 modified) + batchTransfer() support + mintOnce()\n/// @author OpenZeppelin (modified)\n/// @notice ERC20 token with batch transfer and mint-once feature in single-file version\n\ncontract MontheraToken {\n    string public name = \"Monthera\";\n    string public symbol = \"MTHR\";\n    uint8 public decimals = 18;\n\n    uint256 private _totalSupply;\n    address public owner;\n    bool public hasMinted;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    error ERC20InvalidSender(address sender);\n    error ERC20InvalidReceiver(address receiver);\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n    error ERC20InsufficientAllowance(address spender, uint256 currentAllowance, uint256 needed);\n    error ERC20InvalidApprover(address approver);\n    error ERC20InvalidSpender(address spender);\n    error AlreadyMinted();\n    error NotOwner();\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        address from = msg.sender;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        address _owner = msg.sender;\n        _approve(_owner, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        address spender = msg.sender;\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function batchTransfer(address[] calldata recipients, uint256[] calldata amounts) external returns (bool) {\n        if (recipients.length != amounts.length) revert(\"Length mismatch\");\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n            _transfer(msg.sender, recipients[i], amounts[i]);\n        }\n\n        return true;\n    }\n\n    function mintOnce(address to1, uint256 amount1, address to2, uint256 amount2) external {\n        if (msg.sender != owner) revert NotOwner();\n        if (hasMinted) revert AlreadyMinted();\n        hasMinted = true;\n\n        _mint(to1, amount1);\n        _mint(to2, amount2);\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) revert ERC20InvalidSender(from);\n        if (to == address(0)) revert ERC20InvalidReceiver(to);\n\n        uint256 fromBalance = balanceOf[from];\n        if (fromBalance < value) revert ERC20InsufficientBalance(from, fromBalance, value);\n\n        unchecked {\n            balanceOf[from] = fromBalance - value;\n            balanceOf[to] += value;\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) revert ERC20InvalidReceiver(account);\n\n        _totalSupply += value;\n        balanceOf[account] += value;\n\n        emit Transfer(address(0), account, value);\n    }\n\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) revert ERC20InvalidSender(account);\n\n        uint256 fromBalance = balanceOf[account];\n        if (fromBalance < value) revert ERC20InsufficientBalance(account, fromBalance, value);\n\n        unchecked {\n            balanceOf[account] = fromBalance - value;\n            _totalSupply -= value;\n        }\n\n        emit Transfer(account, address(0), value);\n    }\n\n    function _approve(address _owner, address spender, uint256 value) internal {\n        if (_owner == address(0)) revert ERC20InvalidApprover(_owner);\n        if (spender == address(0)) revert ERC20InvalidSpender(spender);\n\n        allowance[_owner][spender] = value;\n        emit Approval(_owner, spender, value);\n    }\n\n    function _spendAllowance(address _owner, address spender, uint256 value) internal {\n        uint256 currentAllowance = allowance[_owner][spender];\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            unchecked {\n                allowance[_owner][spender] = currentAllowance - value;\n            }\n        }\n    }\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[]}}
{"language":"Solidity","sources":{"contracts/montheratokenclaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function transfer(address to, uint256 amount) external returns (bool);\n}\n\ncontract MontheraTokenClaim {\n    IERC20 public immutable token;\n    uint256 public constant CLAIM_AMOUNT = 10_000 * 1e18; // 10,000 token\n    mapping(address => bool) public claimed;\n\n    event Claimed(address indexed user, uint256 amount);\n\n    constructor(address _token) {\n        token = IERC20(_token);\n    }\n\n    function claim() external {\n        require(!claimed[msg.sender], \"Already claimed\");\n        claimed[msg.sender] = true;\n\n        require(\n            token.transfer(msg.sender, CLAIM_AMOUNT),\n            \"Token transfer failed\"\n        );\n\n        emit Claimed(msg.sender, CLAIM_AMOUNT);\n    }\n\n    // Optional: check balance of token left in contract\n    function available() external view returns (uint256) {\n        return address(this).balance;\n    }\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[]}}